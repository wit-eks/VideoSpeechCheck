name: Build Command Line App (win-x64)

on:
  push:
    branches: [ "master" ]

env:
  PROJECT_PATH: Visprech.Cmd/Visprech.Cmd.csproj
  PUBLISH_PATH: Visprech.Cmd/bin/Release/net6.0/win-x64/publish/
  ZIP_FILE: VideoSpeechCheck.zip                        ##relative to PUBLISH_PATH
  EXE_FILE: VideoSpeechCheck.exe                        ##relative to PUBLISH_PATH
  WHISPER_FILE: runtimes/win-x64/whisper.dll            ##relative to PUBLISH_PATH
  RELEASE_ASSET_NAME: VideoSpeechCheck.zip

jobs:
  build:

    runs-on: windows-latest
    if: startsWith(github.event.head_commit.message, 'v0') || startsWith(github.event.head_commit.message, 'v1') || startsWith(github.event.head_commit.message, 'v2') || startsWith(github.event.head_commit.message, 'v3')  
    steps:
    - uses: actions/checkout@v3

    - name: Set Variables
      id: variables_basket
      shell: pwsh
      run: |
        $cm = "${{ github.event.head_commit.message }}"
        $tag_name = $cm.Split([System.Environment]::NewLine,[System.StringSplitOptions]::RemoveEmptyEntries)[0] 
        $release_name = $tag_name.replace('v','')

        echo "TAG_NAME=$tag_name" >> $env:GITHUB_OUTPUT
        echo "RELEASE_NAME=$release_name" >> $env:GITHUB_OUTPUT

    - name: Check Variables
      run: |
        echo "Release name set to ${{ steps.variables_basket.outputs.RELEASE_NAME }}"
        echo "Tag name set to     ${{ steps.variables_basket.outputs.TAG_NAME }}"

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
    
    - name: Publish Project
      run: dotnet publish ${{ env.PROJECT_PATH }} -c Release --self-contained -r win-x64 -p:PublishSingleFile=true -p:PublishTrimmed=true -p:TargetFramework=net6.0

    - name: Create Zip File
      working-directory: ${{ env.PUBLISH_PATH }}
      run: 7z a ${{ env.ZIP_FILE }} ${{ env.EXE_FILE }} ${{ env.WHISPER_FILE }}

    - name: Create Tag
      uses: actions/github-script@v3
      env:
         TAG: ${{ steps.variables_basket.outputs.TAG_NAME }}
      with:
        github-token: ${{ github.token }}
        script: |
          github.git.createRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: "refs/tags/${{ steps.variables_basket.outputs.TAG_NAME }}",
            sha: context.sha
           })

    - name: Create Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        tag_name: ${{ steps.variables_basket.outputs.TAG_NAME }}
        release_name: ${{ steps.variables_basket.outputs.RELEASE_NAME }}

    - name: Upload Release Asset    
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.PUBLISH_PATH }}${{ env.ZIP_FILE }}
        asset_name: ${{ env.RELEASE_ASSET_NAME }}
        asset_content_type: application/zip
